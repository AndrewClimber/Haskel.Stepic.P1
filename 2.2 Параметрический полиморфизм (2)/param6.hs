-- до сих пор говоря о параметрическом полиморфизме мы имели дело с функциями
-- однако встроенные структуры - спсики и кортежи тоже параметрически полиморфны
-- Пример : Тип этого списка - список значений типа [Bool]
-- *Main> :t [True, False]
-- [True, False] :: [Bool]
-- а тут список типа Char - [Char]
-- Main> :t "fffsd"
-- "fffsd" :: [Char]
-- видим, что списки имеют полиморфное поведение. В качестве элементов можем указывать любой тип.
-- Тип пустого списка [] - содержит переменную типа на том месте где у нас до этого были Bool и Char
-- *Main> :t []
-- [] :: [a]
-- этот полиморфизм присутствует и в стандартных функциях над списками.
-- *Main> :t (++)
-- (++) :: [a] -> [a] -> [a]
-- *Main> :t (:)
-- (:) :: a -> [a] -> [a]

-- Кортежи тоже полиморфны. Степень их полиморфизма даже выше чем у списков.
-- Но сначала познакомимся с синтаксисом конструирования
-- вспомним как мы конструировали кортежи раньше : (True, 3)
-- Однако, есть альтернативный синтаксис построения 2-х элементных и более элементных кортежей : (,) True 3.
-- значения кортежа передаем - как параметры функции. Префиксный стиль
-- *Main> (,) True 3
-- (True,3)
-- (True, 3) - миксфиксный стиль
-- *Main> (,,) True 3 'c'
-- (True,3,'c'):t
-- Узнаем тип этого конструкора кортежей
-- *Main> :t (,)
-- (,) :: a -> b -> (a, b)
-- если подставим конкретные типы
-- *Main> :t (,) True 'c'
-- (,) True 'c' :: (Bool, Char)

-- можем задавать ф-и, которые могут понижать степень полиморфизма

dup x = (x, x)
-- *Main> :t dup
-- dup :: b -> (b, b)
-- т.е. видим ограничение. только одного типа могут быть.
-- fst , snd - тоже полиморфны.
-- Main> :t fst
-- fst :: (a, b) -> a

{-
Сколько разных всегда завершающихся функций с типом a -> a -> b -> a -> a можно реализовать?
Две функции одинаковой арности считаются разными, если существует набор значений их аргументов, 
на котором они дают разные результирующие значения.


a -> a -> b -> -> a -> a
Перепишем как :
a1 -> a2 -> b -> a3 -> an
a1 -> a2 -> b -> a3 = Fn
Fn = an . b - отбросили
n = результат
Надо найти n
n = 3
-}
