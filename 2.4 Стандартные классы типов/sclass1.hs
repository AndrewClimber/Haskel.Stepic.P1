-- Расширение классов типов
-- Это м-м слегка похож на наследование в ООП
-- Речь идет о наследовании интерфейсов, а не наследование реализации.
--

module Demo where


    class Eq a where
        (==), (/=) :: a -> a -> Bool
        x /= y = not (x == y)
        x == y = not (x /= y)
    
    -- Новый класс типов - Ord. С контекстом
    -- это м-м расширения класс типов. Который говорит, что Ord расширяе класс типов Eq
    -- А чтобы объявить кого-то представителем класс типов Ord, надо с начала объявить его 
    -- представителем класс типов Eq. Т.е. этот представитель будет иметь сигнатуры и Ord и Eq
    -- класс типов Ord - нужен для того чтобы a мог сравниваться
    class (Eq a) => Ord where
        (<), (<=), (>=), (>) :: a -> a -> Bool
        max, min :: a -> a -> a
        compare :: a -> a -> Ordering
-- Допустимо и множественное наследование
--
class (Eq a, Printable a) => MyClass where 
