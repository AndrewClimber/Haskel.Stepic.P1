-- Вычисления в функциональных языках происходит посредством редукции выражений.
-- Как можно смотреть на редукцию вычислений с точки зрения порядка выполнения программы
-- Пример :
module Demo where 

sumIt :: Int -> Int -> Int
sumIt x y = x + y
{-
*Demo> sumIt (1 + 2) 3
6
Сначала подстановка тела ф-и. а потом уже вычисление.

Это ленивая стратегия вычислений :
sumIt (2 + 3) 4
~> (2 + 3) + 4
~> 5 + 4
~> 9
Это энергичная стратегия :
sumIt (2 + 3) 4
~>  sumIt 5 4
~> 5 + 4
~> 9

Выражение - которое может быть упрощено это - редекс
Редексами мы называем выражения, которые могут быть редуцированы непосредственно, путем подстановки 
тела функции вместо ее имени и связывания формальных параметров фактическими.
в sumIt (2 + 3) 4 - два редекса. первый работает со встроенным оператором + . оно может быть вычислено 2 + 3 = 5
второй редекс - это применение ф-и к своим аргументам. вычисляется с помощью прямой подстановки.
Вычисляя эти редексы - можно применять различные стратегии вычислений
-}
